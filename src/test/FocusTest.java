package test;

/*
Bug: JDK-8181710
 */
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import java.util.stream.Collectors;

public class FocusTest extends javax.swing.JDialog {

    public FocusTest(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    private void init() {
        jCheckBox1.setText("java: " + System.getProperty("java.version"));
        elementList.add(jSpinner1);
        elementList.add(jButton1);
        elementList.add(jCheckBox1);
        setFocusTraversalPolicy(new CustomFocusTraversalPolicy());
//        setFocusTraversalPolicy(new MyOwnFocusTraversalPolicy(elementList));
        FocusTraversalPolicy fp = getFocusTraversalPolicy();
        System.out.println(fp.getClass().getName());
    }

    public static class MyOwnFocusTraversalPolicy
            extends FocusTraversalPolicy
    {
        Vector<Component> order;

        public MyOwnFocusTraversalPolicy(ArrayList<Component> order) {
            this.order = new Vector<>(order.size());
            this.order.addAll(order);
        }
        public Component getComponentAfter(Container focusCycleRoot,
                                           Component aComponent)
        {
            int idx = (order.indexOf(aComponent) + 1) % order.size();
            return order.get(idx);
        }

        public Component getComponentBefore(Container focusCycleRoot,
                                            Component aComponent)
        {
            int idx = order.indexOf(aComponent) - 1;
            if (idx < 0) {
                idx = order.size() - 1;
            }
            return order.get(idx);
        }

        public Component getDefaultComponent(Container focusCycleRoot) {
            return order.get(0);
        }

        public Component getLastComponent(Container focusCycleRoot) {
            return order.lastElement();
        }

        public Component getFirstComponent(Container focusCycleRoot) {
            return order.get(0);
        }
    }

    private class CustomFocusTraversalPolicy extends SortingFocusTraversalPolicy {//extends ContainerOrderFocusTraversalPolicy {

        @Override
        public Component getComponentAfter(Container focusCycleRoot, Component aComponent) {
            int currentPosition = elementList.indexOf(aComponent);
            currentPosition = (currentPosition + 1) % elementList.size();
            Component nextC = elementList.get(currentPosition);
/*	if( nextC == jSpinner1) {
jSpinner1.requestFocusInWindow();
}*/
            return nextC;
        }

        @Override
        public Component getComponentBefore(Container focusCycleRoot, Component aComponent) {
            int currentPosition = elementList.indexOf(aComponent);
            currentPosition = (elementList.size() + currentPosition - 1) % elementList.size();
            return (Component) elementList.get(currentPosition);
        }

        @Override
        public Component getFirstComponent(Container cntnr) {
//            return (Component) elementList.get(0);
            return (Component) elementList.get(elementList.size() - 1);
        }

        @Override
        public Component getLastComponent(Container cntnr) {
            //return (Component) elementList.get(elementList.size() - 1);
            return (Component)elementList.get(0);
        }

        @Override
        public Component getDefaultComponent(Container cntnr) {
            return (Component) elementList.get(0);
        }

        @Override
        protected boolean accept(Component aComponent) {
            return super.accept(aComponent);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("jButton1");

        jCheckBox1.setText("jCheckBox1");

        this.add(jButton1);
        add(jCheckBox1);
        add(jSpinner1);
//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//        getContentPane().setLayout(layout);
//        layout.setHorizontalGroup(
//                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGroup(layout.createSequentialGroup()
//                                .addContainerGap()
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                        .addComponent(jButton1)
//                                        .addComponent(jCheckBox1)
//                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                .addContainerGap(280, Short.MAX_VALUE))
//        );
//        layout.setVerticalGroup(
//                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGroup(layout.createSequentialGroup()
//                                .addContainerGap()
//                                .addComponent(jButton1)
//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                .addComponent(jCheckBox1)
//                                .addContainerGap(195, Short.MAX_VALUE))
//        );

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
/* Set the Nimbus look and feel */
//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
*/
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FocusTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
//</editor-fold>

/* Create and display the dialog */
        java.awt.EventQueue.invokeLater(()-> {
                FocusTest dialog = new FocusTest(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration
    ArrayList<Component> elementList = new ArrayList<Component>();
}
